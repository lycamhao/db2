WITH STMT_INFO AS (
	SELECT
		COALESCE(ACT.MEMBER, PCS.MEMBER) AS MEMBER,
		CASE
			WHEN ACT.ACTIVITY_TYPE IS NOT NULL THEN ACT.ACTIVITY_TYPE
			ELSE (
				CASE
					WHEN PCS.SECTION_TYPE = 'D' THEN 'DYNAMIC STATEMENT'
					WHEN PCS.SECTION_TYPE = 'S' THEN 'STATIC STATEMENT'
					ELSE 'UNKNOWN'
				END
			)
		END AS ACTIVITY_TYPE,
		CASE
			WHEN ACT.ACTIVITY_TYPE IS NOT NULL THEN AGENT.REQUEST_TYPE
			ELSE 'CLOSE'
		END AS REQUEST_TYPE,
		ACT.ENTRY_TIME,
		COALESCE(ACT.TOTAL_CPU_TIME, PCS.TOTAL_CPU_TIME) AS TOTAL_CPU_TIME_US,
		COALESCE(ACT.STMT_EXEC_TIME, PCS.STMT_EXEC_TIME) AS STMT_EXEC_TIME_MS,
		COALESCE(
			ACT.QUERY_COST_ESTIMATE,
			PCS.QUERY_COST_ESTIMATE
		) AS QUERY_COST_ESTIMATE,
		ACT.QUERY_CARD_ESTIMATE,
		ACT.AGENTS_TOP,
		COALESCE(
			ACT.TOTAL_SECTION_SORT_TIME,
			PCS.TOTAL_SECTION_SORT_TIME
		) AS TOTAL_SECTION_SORT_TIME_MS,
		COALESCE(ACT.SORT_OVERFLOWS, PCS.SORT_OVERFLOWS) AS SORT_OVERFLOWS,
		COALESCE(ACT.TOTAL_SORTS, PCS.TOTAL_SORTS) AS TOTAL_SORTS,
		ACT.QUERY_ACTUAL_DEGREE,
		ACT.NUM_AGENTS,
		COALESCE(
			ACT.POOL_DATA_L_READS + ACT.POOL_TEMP_DATA_L_READS + ACT.POOL_XDA_L_READS + ACT.POOL_TEMP_XDA_L_READS + ACT.POOL_INDEX_L_READS + ACT.POOL_TEMP_INDEX_L_READS + ACT.POOL_COL_L_READS + ACT.POOL_TEMP_COL_L_READS,
			PCS.POOL_DATA_L_READS + PCS.POOL_TEMP_DATA_L_READS + PCS.POOL_XDA_L_READS + PCS.POOL_TEMP_XDA_L_READS + PCS.POOL_INDEX_L_READS + PCS.POOL_TEMP_INDEX_L_READS + PCS.POOL_COL_L_READS + PCS.POOL_TEMP_COL_L_READS
		) AS POOL_L_READS,
		COALESCE(
			ACT.POOL_DATA_P_READS + ACT.POOL_INDEX_P_READS + ACT.POOL_XDA_P_READS + ACT.POOL_TEMP_DATA_P_READS + ACT.POOL_TEMP_INDEX_P_READS + ACT.POOL_TEMP_XDA_P_READS + ACT.POOL_COL_P_READS + ACT.POOL_TEMP_COL_P_READS,
			PCS.POOL_DATA_P_READS + PCS.POOL_INDEX_P_READS + PCS.POOL_XDA_P_READS + PCS.POOL_TEMP_DATA_P_READS + PCS.POOL_TEMP_INDEX_P_READS + PCS.POOL_TEMP_XDA_P_READS + PCS.POOL_COL_P_READS + PCS.POOL_TEMP_COL_P_READS
		) AS POOL_P_READS,
		COALESCE(ACT.POOL_DATA_L_READS, PCS.POOL_DATA_L_READS) AS POOL_DATA_L_READS,
		COALESCE(ACT.POOL_INDEX_L_READS, PCS.POOL_INDEX_L_READS) AS POOL_INDEX_L_READS,
		COALESCE(
			ACT.POOL_TEMP_DATA_L_READS + ACT.POOL_TEMP_XDA_L_READS + ACT.POOL_TEMP_INDEX_L_READS,
			PCS.POOL_TEMP_DATA_L_READS + PCS.POOL_TEMP_XDA_L_READS + PCS.POOL_TEMP_INDEX_L_READS
		) AS TEMP_L_READS,
		COALESCE(ACT.INT_ROWS_DELETED, PCS.INT_ROWS_DELETED) AS INT_ROWS_DELETED,
		COALESCE(ACT.INT_ROWS_UPDATED, PCS.INT_ROWS_UPDATED) AS INT_ROWS_UPDATED,
		COALESCE(ACT.INT_ROWS_INSERTED, PCS.INT_ROWS_INSERTED) AS INT_ROWS_INSERTED,
		COALESCE(
			CASE
				WHEN LENGTH(ACT.STMT_TEXT) <= 30 THEN CAST(ACT.STMT_TEXT AS VARCHAR(30))
				ELSE CAST(
					SUBSTR(ACT.STMT_TEXT, 1, 27) || '...' AS VARCHAR(30)
				)
			END,
			CASE
				WHEN LENGTH(PCS.STMT_TEXT) <= 30 THEN CAST(PCS.STMT_TEXT AS VARCHAR(30))
				ELSE CAST(
					SUBSTR(PCS.STMT_TEXT, 1, 27) || '...' AS VARCHAR(30)
				)
			END
		) AS STMT_TEXT,
		CONN.APPLICATION_HANDLE,
		COALESCE(ACT.EXECUTABLE_ID, PCS.EXECUTABLE_ID) AS EXECUTABLE_ID
	FROM
		TABLE(MON_GET_CONNECTION(NULL, 0, 1)) AS CONN
		LEFT OUTER JOIN TABLE(MON_GET_ACTIVITY(NULL, 0)) AS ACT ON CONN.APPLICATION_HANDLE = ACT.APPLICATION_HANDLE
		AND CONN.MEMBER = ACT.MEMBER
		LEFT OUTER JOIN TABLE(MON_GET_AGENT(NULL, NULL, NULL, 0)) AS AGENT ON CONN.APPLICATION_HANDLE = AGENT.APPLICATION_HANDLE
		AND CONN.MEMBER = AGENT.MEMBER
		LEFT OUTER JOIN TABLE(MON_GET_PKG_CACHE_STMT(NULL, NULL, NULL, 0)) AS PCS ON CONN.LAST_EXECUTABLE_ID = PCS.EXECUTABLE_ID
		AND CONN.MEMBER = PCS.MEMBER
	WHERE
		AGENT.AGENT_STATE = 'ACTIVE'
),
MAX_CPU_MEMBER AS (
	SELECT
		STMT_INFO.EXECUTABLE_ID,
		MEMBER AS MAXCPUMEMBER,
		MAX_TOTAL_CPU_TIME_US
	FROM
		STMT_INFO,
		(
			SELECT
				EXECUTABLE_ID,
				MAX(STMT_INFO.TOTAL_CPU_TIME_US) AS MAX_TOTAL_CPU_TIME_US
			FROM
				STMT_INFO
			GROUP BY
				EXECUTABLE_ID
		) AS T
	WHERE
		STMT_INFO.EXECUTABLE_ID = T.EXECUTABLE_ID
		AND STMT_INFO.TOTAL_CPU_TIME_US = T.MAX_TOTAL_CPU_TIME_US
)
SELECT
	MIN(APPLICATION_HANDLE) AS APPLICATION_HANDLE,
	MAX(STMT_TEXT) AS STMT_TEXT,
	MAX(ACTIVITY_TYPE) AS ACTIVITY_TYPE,
	MAX(REQUEST_TYPE) AS REQUEST_TYPE,
	MIN(ENTRY_TIME) AS ENTRY_TIME,
	CAST(SUM(TOTAL_CPU_TIME_US) / 1000.0 AS DOUBLE) AS TOTAL_CPU_TIME_MS,
	SUM(STMT_EXEC_TIME_MS) AS STMT_EXEC_TIME_MS,
	MAX(QUERY_COST_ESTIMATE) AS QUERY_COST_ESTIMATE,
	MAX(QUERY_CARD_ESTIMATE) AS QUERY_CARD_ESTIMATE,
	MAX(AGENTS_TOP) AS AGENTS_TOP,
	SUM(TOTAL_SECTION_SORT_TIME_MS) AS TOTAL_SECTION_SORT_TIME_MS,
	SUM(SORT_OVERFLOWS) AS SORT_OVERFLOWS,
	SUM(TOTAL_SORTS) AS TOTAL_SORTS,
	MAX(QUERY_ACTUAL_DEGREE) AS QUERY_ACTUAL_DEGREE,
	SUM(NUM_AGENTS) AS NUM_AGENTS,
	SUM(POOL_L_READS) AS POOL_L_READS,
	SUM(POOL_P_READS) AS POOL_P_READS,
	SUM(POOL_DATA_L_READS) AS POOL_DATA_L_READS,
	SUM(POOL_INDEX_L_READS) AS POOL_INDEX_L_READS,
	SUM(TEMP_L_READS) AS TEMP_L_READS,
	CASE
		WHEN SUM(POOL_L_READS) = 0 THEN 1
		ELSE CAST(
			1 - SUM(POOL_P_READS) * 1.0 / SUM(POOL_L_READS) AS DOUBLE
		)
	END AS HIT_RATIO,
	MIN(MAXCPUMEMBER) AS MAXCPUMEMBER,
	CAST(MAX(MAX_TOTAL_CPU_TIME_US) / 1000.0 AS DOUBLE) AS MAXDBP_CPU_TIME_MS,
	SUM(INT_ROWS_DELETED) AS INT_ROWS_DELETED,
	SUM(INT_ROWS_UPDATED) AS INT_ROWS_UPDATED,
	SUM(INT_ROWS_INSERTED) AS INT_ROWS_INSERTED,
	STMT_INFO.EXECUTABLE_ID
FROM
	STMT_INFO
	LEFT OUTER JOIN MAX_CPU_MEMBER ON STMT_INFO.EXECUTABLE_ID = MAX_CPU_MEMBER.EXECUTABLE_ID
GROUP BY
	STMT_INFO.EXECUTABLE_ID
ORDER BY
	TOTAL_CPU_TIME_MS DESC